name: $(Date:yyyyMMdd)$(Rev:.r) $(Location).$(EnvironmentName)

parameters:
  - name: EnvironmentName
    displayName: Environment
    type: string
    values:
      - Production
    default: Production
  - name: VariableGroupName
    displayName: React App Custom Environment Variable Group Name
    type: string
    default: env_prod_strapi
  - name: Location
    displayName: Azure Locations
    values:
      - EastUS
      - WestUS
    default: EastUS

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    exclude:
      - azure-pipelines
pr: none

pool:
  vmImage: ubuntu-latest

variables:
  - name: EnvironmentName
    value: ${{ parameters.EnvironmentName }}
  - name: Location
    value: ${{ parameters.Location }}
  - name: VariableGroupName
    value: ${{ parameters.VariableGroupName }}
  - template: variables.yml
    parameters:
      EnvironmentName: ${{ parameters.EnvironmentName }}

steps:
  - template: steps/variables-initialize-webapp.yml@shared
    parameters:
      ResourceGroupBaseName: $(VariableGroupName)
      AppName: $(AppName)
      ShortAppName: $(ShortAppName)
      WebAppCustomDomain: $(WebAppCustomDomain)

  - task: AzureCLI@2
    displayName: Add Environment Variables to .env file
    inputs:
      azureSubscription: $(AzureSubscription.ServiceConnection)
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # System.TeamFoundationCollectionUri = https://qodeca.visualstudio.com/
        # System.TeamProject                 = TravelShield
        Write-Host "Set default Azure DevOps organization '$(System.TeamFoundationCollectionUri)' and project '$(System.TeamProject)'"
        az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project="$(System.TeamProject)"
        Write-Host "Variable group name: '$(VariableGroupName)'"
        $vars = az pipelines variable-group list --query "[?name=='$(VariableGroupName)'].variables" | ConvertFrom-Json
        if (($null -eq $vars) -or ($vars.Count -lt 1)) {
            Write-Warning "Variable group '$(VariableGroupName)' does not exist"
            return
        }
        foreach($v in $vars[0].PSObject.Properties){
          $key = $v.Name
          $value = $v.Value.value
          "${key}=${value}" | Out-File -FilePath "$(Build.SourcesDirectory)/.env.production" -Encoding utf8 -Append
        }
      failOnStandardError: false
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

  - task: Docker@2
    displayName: login
    inputs:
      command: login
      containerRegistry: $(ContainerRegistry.ServiceConnection)

  - task: Docker@2
    displayName: build
    inputs:
      command: build
      containerRegistry: $(ContainerRegistry.ServiceConnection)
      repository: $(ImageRepository)
      Dockerfile: $(Build.SourcesDirectory)/Dockerfile
      buildContext: "."
      tags: |
        $(Build.BuildId)

  - task: Docker@2
    displayName: push
    inputs:
      command: push
      containerRegistry: $(ContainerRegistry.ServiceConnection)
      repository: $(ImageRepository)
      tags: |
        $(Build.BuildId)

  - task: Docker@2
    displayName: logout
    inputs:
      command: logout
      containerRegistry: $(ContainerRegistry.ServiceConnection)

  - task: AzureWebAppContainer@1
    displayName: deploy
    inputs:
      azureSubscription: $(AzureSubscription.ServiceConnection)
      appName: $(WebApp.Name)
      imageName: $(Environment.ContainerRegistryLoginServer)/$(ImageRepository):$(Build.BuildId)

